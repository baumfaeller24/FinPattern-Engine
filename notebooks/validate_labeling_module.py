import sys
import os
import json
import pandas as pd
import pyarrow.dataset as ds
from pathlib import Path

sys.path.append(os.path.abspath(os.path.join(os.getcwd(), '..')))

from core.labeling.labeling import run as labeling_run

def validate_labeling_module():
    """
    Validate the Labeling module using the tick slices generated by DataIngest.
    """
    print("="*60)
    print("LABELING MODULE VALIDATION")
    print("="*60)
    
    # Configuration for labeling - using correct parameter names from the module
    config = {
        "out_dir": "/home/ubuntu/FinPattern-Engine/output/labeling",
        "input_file": "/home/ubuntu/FinPattern-Engine/output/data_ingest/bars_1000t.parquet",  # Single file
        "tick_slice_file": "/home/ubuntu/FinPattern-Engine/output/data_ingest/tick_slices_1000t.parquet",  # Single file
        "symbol": "EURUSD",
        "pip_size": 0.0001,
        "tp_pips": 5.0,
        "sl_pips": 5.0,
        "timeout_bars": 10,
        "side": "long",
        "use_volatility_scaling": False
    }
    
    print(f"Input bars: {config['input_file']}")
    print(f"Input tick slices: {config['tick_slice_file']}")
    print(f"Output directory: {config['out_dir']}")
    
    # First, we need to convert the dataset directories to single files
    bars_dir = Path("/home/ubuntu/FinPattern-Engine/output/data_ingest/bars_1000t")
    tick_slices_dir = Path("/home/ubuntu/FinPattern-Engine/output/data_ingest/tick_slices_1000t")
    
    print("\nConverting datasets to single files for labeling...")
    
    try:
        # Convert bars dataset to single file
        bars_dataset = ds.dataset(bars_dir, format="parquet")
        bars_table = bars_dataset.to_table()
        bars_df = bars_table.to_pandas()
        bars_file = Path(config['input_file'])
        bars_df.to_parquet(bars_file, index=False)
        print(f"‚úÖ Bars converted: {len(bars_df):,} records -> {bars_file}")
        
        # Convert tick slices dataset to single file
        tick_slices_dataset = ds.dataset(tick_slices_dir, format="parquet")
        tick_slices_table = tick_slices_dataset.to_table()
        tick_slices_df = tick_slices_table.to_pandas()
        tick_slices_file = Path(config['tick_slice_file'])
        tick_slices_df.to_parquet(tick_slices_file, index=False)
        print(f"‚úÖ Tick slices converted: {len(tick_slices_df):,} records -> {tick_slices_file}")
        
    except Exception as e:
        print(f"‚ùå ERROR converting datasets: {e}")
        return False
    
    # Run labeling
    try:
        print("\nStarting labeling process...")
        labeling_output = labeling_run(config)
        
        print("\n" + "="*40)
        print("LABELING RESULTS")
        print("="*40)
        print(json.dumps(labeling_output, indent=2))
        
        # Check if labeling was successful
        if labeling_output.get("success", False):
            output_file = Path(labeling_output["labeled_data_path"])
            
            if output_file.exists():
                df_labeled = pd.read_parquet(output_file)
                print(f"\n‚úÖ SUCCESS: {len(df_labeled):,} labeled records")
                print(f"Columns: {list(df_labeled.columns)}")
                
                if 'label' in df_labeled.columns:
                    label_counts = df_labeled['label'].value_counts()
                    print(f"Label distribution: {dict(label_counts)}")
                
                print(f"Sample labeled data:")
                print(df_labeled[['open', 'high', 'low', 'close', 'ret', 'label']].head())
                
                return True
            else:
                print(f"‚ùå ERROR: Output file not found: {output_file}")
                return False
        else:
            print(f"‚ùå LABELING FAILED: {labeling_output.get('error', 'Unknown error')}")
            return False
        
    except Exception as e:
        print(f"‚ùå LABELING FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = validate_labeling_module()
    if success:
        print("\nüéâ LABELING MODULE VALIDATION PASSED!")
    else:
        print("\n‚ùå LABELING MODULE VALIDATION FAILED!")
