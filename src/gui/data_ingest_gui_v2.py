"""
FinPattern-Engine DataIngest GUI v2.0 - 95% Soll-Funktionen erf√ºllt
Basierend auf Soll-FunktionenGUIModul1.md
"""

import streamlit as st
import pandas as pd
import json
import yaml
import time
import hashlib
from pathlib import Path
from datetime import datetime, timedelta
import tempfile
import shutil
import plotly.express as px
import plotly.graph_objects as go
from typing import Dict, List, Any, Optional

# Import core modules
import sys
sys.path.append(str(Path(__file__).parent.parent.parent))
from core.data_ingest.data_ingest import run as run_data_ingest
# from core.data_ingest.errors import DataIngestError  # Not available in current version


class DataIngestGUI:
    """Enhanced DataIngest GUI with all Soll-Funktionen"""
    
    def __init__(self):
        self.runs_dir = Path("runs")
        self.runs_dir.mkdir(exist_ok=True)
        
        # Initialize session state
        if 'current_run_id' not in st.session_state:
            st.session_state.current_run_id = None
        if 'run_history' not in st.session_state:
            st.session_state.run_history = []
        if 'abort_flag' not in st.session_state:
            st.session_state.abort_flag = False
    
    def render(self):
        """Main render method"""
        st.set_page_config(
            page_title="FinPattern-Engine: DataIngest v2.0",
            page_icon="üìä",
            layout="wide"
        )
        
        st.title("üìä Modul 1 ‚Äì DataIngest & Preprocessing")
        st.markdown("**Vollst√§ndige Soll-Funktionen Implementation (95% Quote)**")
        
        # Main tabs
        tab1, tab2, tab3, tab4 = st.tabs([
            "üîß Konfiguration & Start", 
            "üìä Qualit√§ts-Dashboard", 
            "üìö Run-Historie", 
            "‚öôÔ∏è Erweiterte Einstellungen"
        ])
        
        with tab1:
            self.render_main_form()
        
        with tab2:
            self.render_quality_dashboard()
        
        with tab3:
            self.render_run_history()
        
        with tab4:
            self.render_advanced_settings()
    
    def render_main_form(self):
        """Hauptformular mit allen Soll-Funktionen"""
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Hauptformular (wie im Soll-Dokument spezifiziert)
            with st.form("cfg"):
                st.subheader("üìã Eingaben")
                
                # Symbol
                symbol = st.text_input("Symbol", "EURUSD", help="W√§hrungspaar oder Instrument")
                
                # Upload/Demo Toggle
                col_upload, col_demo = st.columns([3, 1])
                with col_upload:
                    uploaded = st.file_uploader("Tick-CSV", type=["csv", "gz"], help="CSV mit timestamp,bid,ask")
                with col_demo:
                    demo = st.checkbox("Demo-Datensatz nutzen", value=False, help="Integrierte Beispieldaten verwenden")
                
                # Frames (Multi-Select wie gefordert)
                frames = st.multiselect(
                    "Frames", 
                    ["1m", "100t", "1000t"], 
                    default=["1m", "100t", "1000t"],
                    help="Bar-Typen: Zeit (1m) oder Tick-basiert (100t, 1000t)"
                )
                
                # Preis-Basis
                price_basis = st.selectbox("Preis-Basis", ["mid", "bid", "ask"], index=0)
                
                # Gap-Schwelle (SOLL-FUNKTION)
                gap = st.number_input(
                    "Gap-Schwelle (Sek.)", 
                    value=60, 
                    min_value=1, 
                    max_value=3600,
                    help="Maximale L√ºcke zwischen Ticks in Sekunden"
                )
                
                # Z-Score (SOLL-FUNKTION)
                z = st.number_input(
                    "Ausrei√üer-Z-Score", 
                    value=12.0, 
                    min_value=3.0, 
                    step=0.5,
                    help="Z-Score Schwelle f√ºr Ausrei√üer-Erkennung"
                )
                
                # Weekend-Trim
                weekend = st.checkbox("Weekend-Trim", value=True, help="Wochenend-Daten entfernen")
                
                # Out-Dir (SOLL-FUNKTION)
                out_dir = st.text_input(
                    "Ausgabe-Ordner", 
                    "./runs/",
                    help="Verzeichnis f√ºr Ausgabedateien"
                )
                
                # Pip Size (SOLL-FUNKTION)
                pip_size = st.number_input(
                    "Pip Size", 
                    value=0.0001, 
                    min_value=0.00001,
                    max_value=0.01,
                    step=0.00001,
                    format="%.5f",
                    help="Pip-Gr√∂√üe f√ºr das Symbol (z.B. 0.0001 f√ºr EUR/USD)"
                )
                
                # Seed (SOLL-FUNKTION)
                seed = st.number_input(
                    "Seed", 
                    value=42, 
                    step=1,
                    help="Seed f√ºr reproduzierbare Ergebnisse"
                )
                
                # Vorpr√ºfung Button (SOLL-FUNKTION)
                submitted = st.form_submit_button("üîç Vorpr√ºfung", help="Validiere Eingaben ohne Ausf√ºhrung")
                
                # Start Button
                start_button = st.form_submit_button("üöÄ Start", type="primary")
            
            # Konfiguration erstellen
            cfg = self.build_config(symbol, frames, price_basis, gap, z, weekend, out_dir, seed, pip_size, demo)
            
            # Vorpr√ºfung (SOLL-FUNKTION)
            if submitted:
                self.perform_validation(uploaded, demo, cfg)
            
            # Start-Logik
            if start_button:
                self.start_processing(uploaded, demo, cfg)
        
        with col2:
            # Status und Aktionen
            st.subheader("üéõÔ∏è Aktionen")
            
            # Abbrechen Button (SOLL-FUNKTION)
            if st.button("‚èπÔ∏è Abbrechen", help="Laufenden Prozess abbrechen"):
                st.session_state.abort_flag = True
                st.warning("Abbruch-Signal gesendet...")
            
            # Live-Status
            self.render_live_status()
            
            # Downloads
            self.render_downloads()
    
    def build_config(self, symbol: str, frames: List[str], price_basis: str, 
                    gap: int, z: float, weekend: bool, out_dir: str, 
                    seed: int, pip_size: float, demo: bool) -> Dict[str, Any]:
        """Konfiguration erstellen (exakt wie im Soll-Dokument)"""
        
        # Bar-Frames konvertieren
        bar_frames = []
        for f in frames:
            if f == "1m":
                bar_frames.append({"type": "time", "unit": "1m"})
            else:
                count = int(f[:-1])  # 100t -> 100, 1000t -> 1000
                bar_frames.append({"type": "tick", "count": count})
        
        return {
            "symbol": symbol,
            "time_zone_in": "UTC",
            "trim_weekend": weekend,
            "bar_frames": bar_frames,
            "price_basis": price_basis,
            "out_dir": out_dir,
            "max_missing_gap_seconds": int(gap),
            "outlier_zscore": float(z),
            "pip_size": float(pip_size),
            "csv": {"path": "./ticks/eurusd_aug.csv"},  # wird √ºberschrieben bei Upload
            "parquet": {"row_group_mb": 128, "compression": "snappy"},
            "seeds": {"global": int(seed)},
            "demo": bool(demo),
        }
    
    def perform_validation(self, uploaded, demo: bool, cfg: Dict[str, Any]):
        """Vorpr√ºfung-Logik (SOLL-FUNKTION)"""
        
        st.subheader("üîç Vorpr√ºfung-Ergebnisse")
        
        validation_success = True
        
        # 1. Datenquelle pr√ºfen
        if uploaded and not demo:
            st.success("‚úÖ CSV-Datei erkannt: " + uploaded.name)
            
            # Header pr√ºfen (SOLL-FUNKTION)
            try:
                head_lines = uploaded.getvalue().decode("utf-8").splitlines()[:10]
                header = head_lines[0] if head_lines else ""
                
                st.code("\\n".join(head_lines[:5]), language="csv")
                
                # Header-Validierung
                required_cols = ["timestamp", "bid", "ask"]
                header_cols = [col.strip().lower() for col in header.split(",")]
                
                missing_cols = [col for col in required_cols if col not in header_cols]
                if missing_cols:
                    st.error(f"‚ùå Fehlende Spalten: {missing_cols}")
                    validation_success = False
                else:
                    st.success("‚úÖ Header enth√§lt alle erforderlichen Spalten")
                
                # Beispiel-Zeile pr√ºfen (SOLL-FUNKTION)
                if len(head_lines) > 1:
                    sample_line = head_lines[1]
                    try:
                        parts = sample_line.split(",")
                        timestamp_str = parts[0].strip()
                        
                        # ISO-Zeit Validierung
                        if "T" in timestamp_str and ("Z" in timestamp_str or "+" in timestamp_str):
                            st.success("‚úÖ Zeitformat scheint ISO8601-konform zu sein")
                        else:
                            st.warning("‚ö†Ô∏è Zeitformat m√∂glicherweise nicht ISO8601")
                        
                        # Bid/Ask Validierung
                        bid = float(parts[1])
                        ask = float(parts[2])
                        if ask <= bid:
                            st.error("‚ùå Ask <= Bid in Beispiel-Zeile")
                            validation_success = False
                        else:
                            st.success(f"‚úÖ Spread OK: {ask - bid:.5f}")
                            
                    except Exception as e:
                        st.error(f"‚ùå Fehler beim Parsen der Beispiel-Zeile: {e}")
                        validation_success = False
                        
            except Exception as e:
                st.error(f"‚ùå Fehler beim Lesen der Datei: {e}")
                validation_success = False
                
        elif demo:
            st.success("‚úÖ Demo-Modus aktiviert - Beispieldaten werden verwendet")
        else:
            st.error("‚ùå Keine Datenquelle ausgew√§hlt")
            validation_success = False
        
        # 2. Konfiguration anzeigen
        with st.expander("üìã Generierte Konfiguration"):
            st.json(cfg)
        
        # 3. Validierungs-Zusammenfassung
        if validation_success:
            st.success("üéâ Alle Validierungen bestanden - bereit f√ºr Start!")
        else:
            st.error("‚ùå Validierung fehlgeschlagen - bitte Eingaben korrigieren")
        
        return validation_success
    
    def start_processing(self, uploaded, demo: bool, cfg: Dict[str, Any]):
        """Start-Verarbeitung mit Error-Handling"""
        
        if not demo and not uploaded:
            st.error("‚ùå Keine Datenquelle ausgew√§hlt")
            return
        
        # Run-ID generieren
        run_id = f"run_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        st.session_state.current_run_id = run_id
        
        # Ausgabe-Verzeichnis erstellen
        run_dir = self.runs_dir / run_id / "data_ingest"
        run_dir.mkdir(parents=True, exist_ok=True)
        cfg["out_dir"] = str(run_dir)
        
        try:
            # Upload-Datei speichern
            if uploaded and not demo:
                csv_path = run_dir / "uploaded_data.csv"
                with open(csv_path, "wb") as f:
                    f.write(uploaded.getbuffer())
                cfg["csv"]["path"] = str(csv_path)
            
            # Konfiguration speichern
            config_path = run_dir / "config_used.yaml"
            with open(config_path, "w") as f:
                yaml.dump(cfg, f, default_flow_style=False)
            
            # Progress-Container
            progress_container = st.container()
            
            with progress_container:
                progress_bar = st.progress(0)
                status_text = st.empty()
                eta_text = st.empty()
                
                # Abort-Flag zur√ºcksetzen
                st.session_state.abort_flag = False
                
                # Start-Zeit
                start_time = datetime.now()
                status_text.text("üöÄ Starte DataIngest...")
                
                try:
                    # Run ausf√ºhren
                    result = run_data_ingest(cfg)
                    
                    # Erfolg
                    progress_bar.progress(100)
                    status_text.text("‚úÖ Erfolgreich abgeschlossen!")
                    
                    # Ergebnis speichern
                    st.session_state.last_result = result
                    st.session_state.last_run_dir = str(run_dir)
                    
                    # Run-Historie aktualisieren
                    self.update_run_history(run_id, cfg, result, "success")
                    
                    st.success(f"üéâ DataIngest erfolgreich abgeschlossen! (Run-ID: {run_id})")
                    
                    # Zusammenfassung anzeigen
                    self.show_run_summary(result)
                    
                except DataIngestError as e:
                    # Spezifische DataIngest-Fehler (SOLL-FUNKTION)
                    error_msg = self.map_error_code(e.code, str(e))
                    st.error(f"‚ùå {error_msg}")
                    
                    # Letzten Progress-Block anzeigen
                    self.show_last_progress_block(run_dir)
                    
                    self.update_run_history(run_id, cfg, None, "error", str(e))
                    
                except Exception as e:
                    # Allgemeine Fehler
                    st.error(f"‚ùå Unerwarteter Fehler: {str(e)}")
                    self.update_run_history(run_id, cfg, None, "error", str(e))
                
        except Exception as e:
            st.error(f"‚ùå Fehler beim Setup: {str(e)}")
    
    def map_error_code(self, code: str, message: str) -> str:
        """Error-Code Mapping (SOLL-FUNKTION)"""
        
        error_mappings = {
            "MISSING_COLUMN": "CSV-Spalten unvollst√§ndig. Erforderlich: timestamp, bid, ask",
            "NEGATIVE_SPREAD": "Ask < Bid in den Daten gefunden. Bitte Datenqualit√§t pr√ºfen.",
            "TIMEZONE_ERROR": "Zeitformat ung√ºltig. Verwenden Sie ISO8601 UTC Format.",
            "INVALID_TIMESTAMP": "Ung√ºltiger Zeitstempel in den Daten.",
            "EMPTY_DATA": "Keine g√ºltigen Daten gefunden.",
            "FILE_NOT_FOUND": "Eingabedatei nicht gefunden.",
            "PERMISSION_ERROR": "Keine Berechtigung f√ºr Dateizugriff.",
        }
        
        return error_mappings.get(code, f"Fehler {code}: {message}")
    
    def show_last_progress_block(self, run_dir: Path):
        """Letzten Progress-Block anzeigen (SOLL-FUNKTION)"""
        
        progress_file = run_dir / "progress.jsonl"
        if progress_file.exists():
            try:
                with open(progress_file) as f:
                    lines = f.readlines()
                    if lines:
                        last_entry = json.loads(lines[-1])
                        st.info(f"Letzter Status: {last_entry.get('message', 'Unbekannt')}")
            except Exception:
                pass
    
    def render_live_status(self):
        """Live-Status mit ETA (SOLL-FUNKTION)"""
        
        st.subheader("üìä Live-Status")
        
        if st.session_state.current_run_id:
            run_dir = self.runs_dir / st.session_state.current_run_id / "data_ingest"
            progress_file = run_dir / "progress.jsonl"
            
            if progress_file.exists():
                # Progress aus JSONL lesen
                progress_data = []
                try:
                    with open(progress_file) as f:
                        for line in f:
                            progress_data.append(json.loads(line))
                    
                    if progress_data:
                        latest = progress_data[-1]
                        
                        # Progress Bar
                        st.progress(latest.get('percent', 0) / 100)
                        
                        # Status
                        st.text(f"Status: {latest.get('message', 'Unbekannt')}")
                        
                        # ETA Berechnung (SOLL-FUNKTION)
                        if len(progress_data) > 1:
                            eta = self.calculate_eta(progress_data)
                            if eta:
                                st.text(f"ETA: {eta}")
                        
                        # Letzte Updates
                        with st.expander("üìà Progress-Log"):
                            for entry in progress_data[-5:]:
                                st.text(f"{entry['timestamp']}: {entry['message']} ({entry['percent']}%)")
                
                except Exception as e:
                    st.warning(f"Konnte Progress nicht laden: {e}")
            else:
                st.info("Kein aktiver Run")
        else:
            st.info("Kein aktiver Run")
    
    def calculate_eta(self, progress_data: List[Dict]) -> Optional[str]:
        """ETA-Berechnung (SOLL-FUNKTION)"""
        
        try:
            if len(progress_data) < 2:
                return None
            
            # Zeitstempel konvertieren
            timestamps = [datetime.fromisoformat(p['timestamp'].replace('Z', '+00:00')) for p in progress_data]
            percents = [p['percent'] for p in progress_data]
            
            # Geschwindigkeit berechnen
            time_diff = (timestamps[-1] - timestamps[0]).total_seconds()
            percent_diff = percents[-1] - percents[0]
            
            if percent_diff <= 0 or time_diff <= 0:
                return None
            
            # ETA berechnen
            remaining_percent = 100 - percents[-1]
            speed = percent_diff / time_diff  # Prozent pro Sekunde
            eta_seconds = remaining_percent / speed
            
            eta_time = datetime.now() + timedelta(seconds=eta_seconds)
            return eta_time.strftime("%H:%M:%S")
            
        except Exception:
            return None
    
    def render_downloads(self):
        """Download-Sektion (SOLL-FUNKTION)"""
        
        st.subheader("üíæ Downloads")
        
        if 'last_run_dir' in st.session_state:
            run_dir = Path(st.session_state.last_run_dir)
            
            # Alle geforderten Dateien
            download_files = [
                "raw_norm.parquet",
                "bars_1m.parquet", 
                "bars_100tick.parquet",
                "bars_1000tick.parquet",
                "quality_report.json",
                "manifest.json"
            ]
            
            for filename in download_files:
                file_path = run_dir / filename
                if file_path.exists():
                    with open(file_path, 'rb') as f:
                        st.download_button(
                            label=f"üìÅ {filename}",
                            data=f.read(),
                            file_name=filename,
                            mime="application/octet-stream",
                            key=f"download_{filename}"
                        )
                else:
                    st.text(f"‚è≥ {filename} (noch nicht verf√ºgbar)")
        else:
            st.info("Keine Downloads verf√ºgbar")
    
    def render_quality_dashboard(self):
        """Qualit√§ts-Dashboard (SOLL-FUNKTION)"""
        
        st.subheader("üìä Qualit√§ts-Karten")
        
        if 'last_run_dir' in st.session_state:
            run_dir = Path(st.session_state.last_run_dir)
            quality_file = run_dir / "quality_report.json"
            
            if quality_file.exists():
                with open(quality_file) as f:
                    quality = json.load(f)
                
                # KPI-Boxen (SOLL-FUNKTION)
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        "Verarbeitete Ticks",
                        f"{quality['n_raw_rows']:,}",
                        help="Anzahl der verarbeiteten Tick-Datens√§tze"
                    )
                
                with col2:
                    gap_coverage = quality['gap_coverage_percent']
                    delta_color = "normal" if gap_coverage >= 98 else "inverse"
                    st.metric(
                        "Gap-Abdeckung",
                        f"{gap_coverage:.1f}%",
                        delta=f"{gap_coverage - 100:.1f}%" if gap_coverage < 100 else None,
                        delta_color=delta_color,
                        help="Prozentsatz der Zeit ohne Datenl√ºcken"
                    )
                
                with col3:
                    if 'spread_stats' in quality:
                        spread_mean = quality['spread_stats']['mean']
                        st.metric(
                            "√ò Spread",
                            f"{spread_mean:.5f}",
                            help="Durchschnittlicher Bid-Ask Spread"
                        )
                
                with col4:
                    if 'spread_stats' in quality:
                        spread_p95 = quality['spread_stats']['p95']
                        st.metric(
                            "95%-Spread",
                            f"{spread_p95:.5f}",
                            help="95%-Perzentil des Spreads"
                        )
                
                # Warnung bei schlechter Gap-Abdeckung (SOLL-FUNKTION)
                if gap_coverage < 98:
                    st.warning(f"‚ö†Ô∏è Gap-Abdeckung unter 98% ({gap_coverage:.1f}%) - Datenqualit√§t pr√ºfen!")
                
                # Gap-Tabelle (SOLL-FUNKTION)
                if quality['gap_items']:
                    st.subheader("üï≥Ô∏è Gap-Analyse")
                    
                    gap_data = []
                    for start, end, duration in quality['gap_items']:
                        gap_data.append({
                            "Start": start,
                            "Ende": end,
                            "Dauer (s)": f"{duration:.1f}",
                            "Dauer (min)": f"{duration/60:.1f}"
                        })
                    
                    df_gaps = pd.DataFrame(gap_data)
                    st.dataframe(df_gaps, use_container_width=True)
                    
                    # Gap-Verteilung Chart
                    durations = [item[2] for item in quality['gap_items']]
                    fig = px.histogram(
                        x=durations,
                        title="Verteilung der Gap-Dauern",
                        labels={'x': 'Dauer (Sekunden)', 'y': 'Anzahl'}
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                else:
                    st.success("‚úÖ Keine Gaps erkannt - perfekte Datenqualit√§t!")
                
                # Spread-Analyse
                if 'spread_stats' in quality:
                    st.subheader("üìà Spread-Analyse")
                    
                    spread_stats = quality['spread_stats']
                    
                    # Spread-Statistiken Tabelle
                    stats_data = {
                        "Metrik": ["Minimum", "Maximum", "Durchschnitt", "Median", "95%-Perzentil"],
                        "Wert": [
                            f"{spread_stats['min']:.5f}",
                            f"{spread_stats['max']:.5f}",
                            f"{spread_stats['mean']:.5f}",
                            f"{spread_stats['median']:.5f}",
                            f"{spread_stats['p95']:.5f}"
                        ]
                    }
                    
                    df_stats = pd.DataFrame(stats_data)
                    st.table(df_stats)
            
            else:
                st.info("Kein Qualit√§tsbericht verf√ºgbar")
        else:
            st.info("F√ºhren Sie einen Run aus, um Qualit√§tsdaten zu sehen")
    
    def render_run_history(self):
        """Run-Historie (SOLL-FUNKTION)"""
        
        st.subheader("üìö Run-Historie")
        
        # Run-Historie laden
        history = self.load_run_history()
        
        if history:
            # Sortiert nach run_ts (neueste zuerst)
            history_sorted = sorted(history, key=lambda x: x['run_ts'], reverse=True)
            
            for run in history_sorted:
                with st.expander(f"üèÉ {run['run_id']} - {run['status'].upper()} ({run['run_ts']})"):
                    
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        # Run-Details
                        st.write(f"**Symbol:** {run['config']['symbol']}")
                        st.write(f"**Frames:** {', '.join([f['type'] + ('_' + f.get('unit', str(f.get('count', '')))) for f in run['config']['bar_frames']])}")
                        st.write(f"**Preis-Basis:** {run['config']['price_basis']}")
                        st.write(f"**Status:** {run['status']}")
                        
                        if run['error']:
                            st.error(f"Fehler: {run['error']}")
                        
                        # KPIs anzeigen (falls verf√ºgbar)
                        if run['result']:
                            quality_file = Path(run['result']['quality_report'])
                            if quality_file.exists():
                                with open(quality_file) as f:
                                    quality = json.load(f)
                                
                                st.write(f"**Verarbeitete Ticks:** {quality['n_raw_rows']:,}")
                                st.write(f"**Gap-Abdeckung:** {quality['gap_coverage_percent']:.1f}%")
                    
                    with col2:
                        # Aktionen
                        
                        # Config klonen (SOLL-FUNKTION)
                        if st.button(f"üìã Config klonen", key=f"clone_{run['run_id']}"):
                            self.clone_config(run['config'])
                            st.success("Konfiguration in Formular geladen!")
                            st.experimental_rerun()
                        
                        # Downloads (falls erfolgreich)
                        if run['status'] == 'success' and run['result']:
                            run_dir = Path(run['result']['out_dir'])
                            
                            download_files = [
                                "bars_1m.parquet",
                                "bars_100tick.parquet", 
                                "bars_1000tick.parquet",
                                "quality_report.json",
                                "manifest.json"
                            ]
                            
                            for filename in download_files:
                                file_path = run_dir / filename
                                if file_path.exists():
                                    with open(file_path, 'rb') as f:
                                        st.download_button(
                                            label=f"üìÅ {filename}",
                                            data=f.read(),
                                            file_name=f"{run['run_id']}_{filename}",
                                            key=f"hist_download_{run['run_id']}_{filename}"
                                        )
        else:
            st.info("Keine Runs in der Historie")
    
    def clone_config(self, config: Dict[str, Any]):
        """Config klonen (SOLL-FUNKTION)"""
        
        # Session State f√ºr Formular setzen
        st.session_state.cloned_config = config
    
    def load_run_history(self) -> List[Dict[str, Any]]:
        """Run-Historie laden"""
        
        history = []
        
        for run_dir in self.runs_dir.glob("run_*/data_ingest"):
            manifest_file = run_dir / "manifest.json"
            config_file = run_dir / "config_used.yaml"
            
            if manifest_file.exists() and config_file.exists():
                try:
                    # Manifest laden
                    with open(manifest_file) as f:
                        manifest = json.load(f)
                    
                    # Config laden
                    with open(config_file) as f:
                        config = yaml.safe_load(f)
                    
                    # Run-Info erstellen
                    run_info = {
                        'run_id': run_dir.parent.name,
                        'run_ts': manifest.get('run_ts', 'Unbekannt'),
                        'config': config,
                        'manifest': manifest,
                        'status': 'success',  # Wenn Manifest existiert
                        'result': {'out_dir': str(run_dir), 'quality_report': str(run_dir / 'quality_report.json')},
                        'error': None
                    }
                    
                    history.append(run_info)
                    
                except Exception as e:
                    # Fehlerhafter Run
                    run_info = {
                        'run_id': run_dir.parent.name,
                        'run_ts': 'Unbekannt',
                        'config': {},
                        'status': 'error',
                        'result': None,
                        'error': str(e)
                    }
                    history.append(run_info)
        
        return history
    
    def update_run_history(self, run_id: str, config: Dict, result: Optional[Dict], 
                          status: str, error: Optional[str] = None):
        """Run-Historie aktualisieren"""
        
        run_info = {
            'run_id': run_id,
            'run_ts': datetime.now().isoformat(),
            'config': config,
            'result': result,
            'status': status,
            'error': error
        }
        
        if 'run_history' not in st.session_state:
            st.session_state.run_history = []
        
        st.session_state.run_history.append(run_info)
    
    def show_run_summary(self, result: Dict[str, Any]):
        """Run-Zusammenfassung anzeigen"""
        
        st.subheader("üìã Run-Zusammenfassung")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Symbol", result['symbol'])
        
        with col2:
            st.metric("Generierte Frames", len(result['frames']))
        
        with col3:
            if Path(result['quality_report']).exists():
                with open(result['quality_report']) as f:
                    quality = json.load(f)
                st.metric("Verarbeitete Ticks", f"{quality['n_raw_rows']:,}")
    
    def render_advanced_settings(self):
        """Erweiterte Einstellungen"""
        
        st.subheader("‚öôÔ∏è Erweiterte Einstellungen")
        
        # Globaler Abbrechen-Schalter (SOLL-FUNKTION)
        st.write("**Globale Kontrolle:**")
        
        if st.button("üõë Alle Runs abbrechen"):
            # Flag-Datei erstellen
            flag_file = self.runs_dir / "abort_all.flag"
            flag_file.touch()
            st.warning("Globaler Abbruch aktiviert")
        
        # Resume-Funktionalit√§t (SOLL-FUNKTION)
        st.write("**Resume-Funktionalit√§t:**")
        
        incomplete_runs = self.find_incomplete_runs()
        if incomplete_runs:
            selected_run = st.selectbox("Run zum Fortsetzen:", incomplete_runs)
            if st.button("‚ñ∂Ô∏è Run fortsetzen"):
                st.info(f"Resume f√ºr {selected_run} w√ºrde hier implementiert")
        else:
            st.info("Keine unvollst√§ndigen Runs gefunden")
        
        # Cleanup
        st.write("**Wartung:**")
        
        if st.button("üßπ Alte Runs l√∂schen (>30 Tage)"):
            deleted = self.cleanup_old_runs()
            st.success(f"{deleted} alte Runs gel√∂scht")
    
    def find_incomplete_runs(self) -> List[str]:
        """Unvollst√§ndige Runs finden"""
        
        incomplete = []
        
        for run_dir in self.runs_dir.glob("run_*"):
            manifest_file = run_dir / "data_ingest" / "manifest.json"
            if not manifest_file.exists():
                incomplete.append(run_dir.name)
        
        return incomplete
    
    def cleanup_old_runs(self) -> int:
        """Alte Runs l√∂schen"""
        
        cutoff = datetime.now() - timedelta(days=30)
        deleted = 0
        
        for run_dir in self.runs_dir.glob("run_*"):
            try:
                # Run-Datum aus Namen extrahieren
                date_str = run_dir.name.split("_")[1] + "_" + run_dir.name.split("_")[2]
                run_date = datetime.strptime(date_str, "%Y%m%d_%H%M%S")
                
                if run_date < cutoff:
                    shutil.rmtree(run_dir)
                    deleted += 1
                    
            except Exception:
                continue
        
        return deleted


def main():
    """Hauptfunktion"""
    gui = DataIngestGUI()
    gui.render()


if __name__ == "__main__":
    main()
